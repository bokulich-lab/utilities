name: Test and build

on:
  workflow_call:
    inputs:
      distro:
        description: 'The distribution to test against'
        required: true
        default: tiny
        type: string
      plugin_name:
        description: 'Name of the plugin'
        required: false
        default: ${{ github.event.repository.name }}
        type: string
      build_docker:
        description: 'Whether to build Docker image'
        required: false
        default: false
        type: boolean

jobs:
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          version: "25.1.0"
          options: ". --check --extend-exclude '.*_version\\.py$' --verbose"

  test:
    runs-on: ubuntu-latest
    outputs:
      latest-dev-tag: ${{ steps.fetch-tags.outputs.latest-dev-tag }}
      latest-stable-tag: ${{ steps.fetch-tags.outputs.latest-stable-tag }}
      commit-msg: ${{ steps.get-commit-msg.outputs.commit-msg }}
      tag: ${{ steps.create-conda-yaml.outputs.tag }}
      epoch: ${{ steps.create-conda-yaml.outputs.epoch }}
      qiime-deps: ${{ steps.create-conda-yaml.outputs.qiime-deps }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Checkout utilities
        uses: actions/checkout@v4
        with:
          repository: bokulich-lab/utilities
          path: utilities

      - name: Get last commit
        id: get-commit-msg
        run: |
          # Get commit message and escape potential special characters
          commit_msg=$(git log --pretty=%B -n 1 --skip 1 2>/dev/null)
          # Use proper delimiter for multiline strings in GitHub Actions
          echo "commit-msg<<EOF" >> $GITHUB_OUTPUT
          echo "$commit_msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: python -m pip install requests yq pyyaml

      - name: Fetch latest tags
        id: fetch-tags
        run: |
          latest_tags=$(python ./utilities/ci/get-tags.py)
          echo "$latest_tags" > tags.txt
          
          latest_dev_tag=$(grep 'latest-dev-tag' tags.txt | cut -d '=' -f 2)
          latest_stable_tag=$(grep 'latest-stable-tag' tags.txt | cut -d '=' -f 2)
          
          echo "latest-dev-tag=$latest_dev_tag" >> $GITHUB_OUTPUT
          echo "latest-stable-tag=$latest_stable_tag" >> $GITHUB_OUTPUT

      - name: Create conda yaml
        id: create-conda-yaml
        run: |
          commit_msg="${{ steps.get-commit-msg.outputs.commit-msg }}"
          if [[ "$commit_msg" == *"[stable]"* ]] || [[ "$commit_msg" == *"[prod]"* ]]; then
              tag="${{ steps.fetch-tags.outputs.latest-stable-tag }}"
          else
              tag="${{ steps.fetch-tags.outputs.latest-dev-tag }}"
          fi
          # Extract only the year and month part (e.g., 2024.10) from the tag
          tag_prefix=$(echo $tag | cut -d '.' -f 1,2)
          python ./utilities/ci/get-dependencies.py --distro "${{ inputs.distro }}" --version-tag $tag_prefix --repositories-yaml ./utilities/ci/repositories.yaml
          cat environment.yml >> $GITHUB_STEP_SUMMARY
          echo "qiime-deps=$(tr '\n' ' ' < repo-urls.txt | xargs)" >> $GITHUB_OUTPUT
          echo "epoch=$tag_prefix" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: conda-env
          condarc-file: ./utilities/ci/condarc

      - name: Get date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache conda env
        uses: actions/cache@v3
        with:
          path: /usr/share/miniconda/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n conda-env -f environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install dev versions of QIIME repos
        if: ${{ steps.create-conda-yaml.outputs.qiime-deps != '' && !contains(steps.get-commit-msg.outputs.commit-msg, '[stable]') && !contains(steps.get-commit-msg.outputs.commit-msg, '[prod]') }}
        run: mamba run -n conda-env pip install ${{ steps.create-conda-yaml.outputs.qiime-deps }}

      - name: Update specific dependency, if requested
        if: contains(${{ steps.get-commit-msg.outputs.commit-msg }}, '[add:')
        run: |
            commit_msg="${{ steps.get-commit-msg.outputs.commit-msg }}"
            IFS=',' read -ra ADDR <<< "$commit_msg"
            for i in "${ADDR[@]}"; do
                pkg_name=$(echo "$i" | awk -F':' '/\[add/{print $2}')
                commit_hash=$(echo "$i" | awk -F':' '/\[add/{print $3}' | awk -F']' '{print $1}')
                if [[ $(yq '.repositories[].name' ./utilities/ci/repositories.yaml | grep -c $pkg_name) -eq 1 ]]; then
                    pkg_url=$(yq ".repositories[] | select(.name == \"$pkg_name\") | .url" utilities/ci/repositories.yaml | tr -d '"')
                    mamba run -n conda-env pip install "git+$pkg_url@$commit_hash"
                fi
            done

      - name: Install plugin
        run: |
          mamba run -n conda-env pip install .
          mamba run -n conda-env qiime dev refresh-cache

      - name: Install dev dependencies
        run: mamba run -n conda-env pip install pytest pytest-cov coverage parameterized pytest-xdist

      - name: Run tests
        id: test
        run: mamba run -n conda-env make test-cov

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: steps.test.outcome == 'success'
        with:
          name: coverage
          path: coverage.xml

      - name: Upload environment yaml
        uses: actions/upload-artifact@v4
        if: steps.test.outcome == 'success' && inputs.build_docker && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) || contains(steps.get-commit-msg.outputs.commit-msg, '[build-image]'))
        with:
          name: environment
          path: environment.yml

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ inputs.build_docker && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) || contains(needs.test.outputs.commit-msg, '[build-image]')) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get short SHA
        id: short-sha
        run: echo "short-sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Get tag name
        id: tag-name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download environment.yml
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the test image
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ github.sha }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            EPOCH=${{ needs.test.outputs.tag }}
            ENVIRONMENT=passed
            PLUGIN_NAME=${{ inputs.plugin_name }}

      - name: Test plugin installation
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: docker run ${{ github.sha }} make -f ./plugin/Makefile test-docker

      - name: Run tests in the container
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: docker run --rm ${{ github.sha }}

      - name: Save test image as tarballÃŸ
        if: ${{ github.event_name == 'pull_request' && contains(needs.test.outputs.commit-msg, '[build-image]') }}
        run: |
          docker save ${{ github.sha }} | gzip > test-image.tar.gz

      - name: Build production image
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          outputs: type=docker,dest=prod-image.tar
          tags: ${{ startsWith(github.ref, 'refs/tags/') && steps.tag-name.outputs.tag || format('main-{0}', steps.short-sha.outputs.short-sha) }}
          target: prod
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            EPOCH=${{ needs.test.outputs.tag }}
            ENVIRONMENT=passed
            PLUGIN_NAME=${{ inputs.plugin_name }}

      - name: Upload test image artifact
        if: ${{ github.event_name == 'pull_request' && contains(needs.test.outputs.commit-msg, '[build-image]') }}
        uses: actions/upload-artifact@v4
        with:
          name: test-docker-image
          path: test-image.tar.gz
          retention-days: 2

      - name: Upload production image artifact
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
        uses: actions/upload-artifact@v4
        with:
          name: prod-docker-image
          path: prod-image.tar
          retention-days: 1

      - name: Create build metadata
        if: ${{ inputs.build_docker }}
        run: |
          cat > build-metadata.json << EOF
          {
            "repository": "${{ github.event.repository.name }}",
            "sha": "${{ github.sha }}",
            "short_sha": "${{ steps.short-sha.outputs.short-sha }}",
            "epoch": "${{ needs.test.outputs.tag }}",
            "commit_msg": ${{ toJSON(needs.test.outputs.commit-msg) }},
            "ref": "${{ github.ref }}",
            "event_name": "${{ github.event_name }}",
            "pr_number": "${{ github.event.number }}",
            "tag_name": "${{ steps.tag-name.outputs.tag || '' }}",
            "is_tag_push": ${{ startsWith(github.ref, 'refs/tags/') }},
            "build_pr_image": ${{ github.event_name == 'pull_request' && contains(needs.test.outputs.commit-msg, '[build-image]') }},
            "is_main_push": ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
          }
          EOF

      - name: Upload build metadata
        if: ${{ inputs.build_docker }}
        uses: actions/upload-artifact@v4
        with:
          name: build-metadata
          path: build-metadata.json
          retention-days: 1
            