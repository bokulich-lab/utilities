name: Docker Push (Automated)

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]  # Replace with your actual workflow name
    types:
      - completed

jobs:
  push-docker-images:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_repository.full_name != github.repository }}
    steps:
      - name: Download build metadata
        uses: actions/github-script@v7
        with:
          script: |
            // Get artifacts from the triggering workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            // Find build metadata artifact
            const metadataArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === 'build-metadata'
            );

            if (!metadataArtifact) {
              console.log('No build metadata found, skipping Docker push');
              return;
            }

            // Download the metadata
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: metadataArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            fs.writeFileSync('metadata.zip', Buffer.from(download.data));

      - name: Extract and parse metadata
        id: metadata
        run: |
          if [ -f "metadata.zip" ]; then
            unzip metadata.zip
            if [ -f "build-metadata.json" ]; then
              # Parse JSON and set outputs
              echo "repository=$(jq -r '.repository' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "sha=$(jq -r '.sha' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "short-sha=$(jq -r '.short_sha' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "epoch=$(jq -r '.epoch' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "ref=$(jq -r '.ref' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "event-name=$(jq -r '.event_name' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "pr-number=$(jq -r '.pr_number' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "build-pr-image=$(jq -r '.build_pr_image' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "is-main-push=$(jq -r '.is_main_push' build-metadata.json)" >> $GITHUB_OUTPUT
              echo "has-metadata=true" >> $GITHUB_OUTPUT
              
              # Display metadata for debugging
              echo "Build metadata:"
              cat build-metadata.json | jq .
            else
              echo "has-metadata=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-metadata=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker push status check
        if: steps.metadata.outputs.has-metadata == 'true' && (steps.metadata.outputs.build-pr-image == 'true' || steps.metadata.outputs.is-main-push == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ steps.metadata.outputs.repository }}'.split('/');
            const sha = '${{ steps.metadata.outputs.sha }}';
            
            await github.rest.checks.create({
              owner: owner,
              repo: repo,
              name: 'Docker Push',
              head_sha: sha,
              status: 'in_progress',
              started_at: new Date().toISOString(),
              details_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              output: {
                title: 'Docker Push',
                summary: 'Building and pushing Docker images...'
              }
            });

      - name: Set up Docker Buildx
        if: steps.metadata.outputs.has-metadata == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to the remote registry
        if: steps.metadata.outputs.has-metadata == 'true'
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download test image artifact
        if: steps.metadata.outputs.has-metadata == 'true' && steps.metadata.outputs.build-pr-image == 'true'
        uses: actions/download-artifact@v4
        with:
          name: test-docker-image
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load and push test image
        if: steps.metadata.outputs.has-metadata == 'true' && steps.metadata.outputs.build-pr-image == 'true'
        id: push-test-image
        run: |
          if [ -f "test-image.tar.gz" ]; then
            # Load the image
            docker load < test-image.tar.gz
            
            # Determine the tag based on event type
            if [ "${{ steps.metadata.outputs.event-name }}" = "pull_request" ]; then
              TAG="quay.io/${{ steps.metadata.outputs.repository }}:pr-${{ steps.metadata.outputs.pr-number }}-${{ steps.metadata.outputs.short-sha }}"
            else
              TAG="quay.io/${{ steps.metadata.outputs.repository }}:test-${{ steps.metadata.outputs.short-sha }}"
            fi
            
            # Re-tag and push
            docker tag ${{ steps.metadata.outputs.sha }} "$TAG"
            docker push "$TAG"
            echo "Pushed test image: $TAG"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "No test image artifact found"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Download production image artifact
        if: steps.metadata.outputs.has-metadata == 'true' && steps.metadata.outputs.is-main-push == 'true'
        uses: actions/download-artifact@v4
        with:
          name: prod-docker-image
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load and push production image
        if: steps.metadata.outputs.has-metadata == 'true' && steps.metadata.outputs.is-main-push == 'true'
        id: push-prod-image
        run: |
          if [ -f "prod-image.tar" ]; then
            # Load the image
            docker load < prod-image.tar
            
            # Tag and push production image
            TAG="quay.io/${{ steps.metadata.outputs.repository }}:${{ steps.metadata.outputs.epoch }}-${{ steps.metadata.outputs.short-sha }}"
            docker tag temp-prod-image "$TAG"
            docker push "$TAG"
            echo "Pushed production image: $TAG"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "No production image artifact found"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Docker push status check
        if: always() && steps.metadata.outputs.has-metadata == 'true' && (steps.metadata.outputs.build-pr-image == 'true' || steps.metadata.outputs.is-main-push == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ steps.metadata.outputs.repository }}'.split('/');
            const sha = '${{ steps.metadata.outputs.sha }}';
            
            // Determine overall status
            const testResult = '${{ steps.push-test-image.outcome }}';
            const prodResult = '${{ steps.push-prod-image.outcome }}';
            const testSuccess = '${{ steps.push-test-image.outputs.success }}' === 'true';
            const prodSuccess = '${{ steps.push-prod-image.outputs.success }}' === 'true';
            
            let conclusion = 'success';
            let summary = '';
            let details = [];
            
            // Check test image results
            if ('${{ steps.metadata.outputs.build-pr-image }}' === 'true') {
              if (testResult === 'success' && testSuccess) {
                details.push(`✅ Test image pushed: \`${{ steps.push-test-image.outputs.tag }}\``);
              } else {
                conclusion = 'failure';
                details.push('❌ Test image push failed');
              }
            }
            
            // Check production image results
            if ('${{ steps.metadata.outputs.is-main-push }}' === 'true') {
              if (prodResult === 'success' && prodSuccess) {
                details.push(`✅ Production image pushed: \`${{ steps.push-prod-image.outputs.tag }}\``);
              } else {
                conclusion = 'failure';
                details.push('❌ Production image push failed');
              }
            }
            
            summary = details.join('\n');
            
            await github.rest.checks.create({
              owner: owner,
              repo: repo,
              name: 'Docker Push',
              head_sha: sha,
              status: 'completed',
              conclusion: conclusion,
              completed_at: new Date().toISOString(),
              details_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              output: {
                title: conclusion === 'success' ? 'Docker Push Successful' : 'Docker Push Failed',
                summary: summary
              }
            }); 